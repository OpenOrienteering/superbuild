# This file is part of OpenOrienteering.

# Copyright 2016-2020 Kai Pastor
#
# Redistribution and use is allowed according to the terms of the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products 
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set(version        7.1.0)
set(download_hash  SHA256=876151e2279346f6bdbc63bd59790b48733496a957bccd5e51b640fdd26eaa8d)
set(patch_version  ${version}-1)
set(patch_hash     SHA256=0f185bc63d2023cac1906304a5d95c6a8005ccd829016a6227ae169bd3ec7462)
set(base_url       https://snapshot.debian.org/archive/debian/20200701T145157Z/pool/main/p/proj/)

option(USE_SYSTEM_PROJ "Use the system PROJ4 if possible" ON)

set(test_system_proj [[
	if(${USE_SYSTEM_PROJ})
		enable_language(C)
		find_library(PROJ4_LIBRARY NAMES proj QUIET)
		find_path(PROJ4_INCLUDE_DIR NAMES proj_api.h QUIET)
		string(FIND "${PROJ4_LIBRARY}" "${CMAKE_STAGING_PREFIX}/" staging_prefix_start)
		if(PROJ4_LIBRARY AND PROJ4_INCLUDE_DIR AND NOT staging_prefix_start EQUAL 0)
			message(STATUS "Found ${SYSTEM_NAME} PROJ4: ${PROJ4_LIBRARY}")
			set(BUILD_CONDITION 0)
		endif()
	endif()
]])

string(CONCAT portability_sed [[
# Generated by ]] "${CMAKE_CURRENT_LIST_FILE}\n" [[
# On macOS, the temporary files are not put into the subdir.
s/^\(begin [^ ]*\) [^ ]*xzi/\1 tmp.xzi/
s/^\(xz -dc\) [^ ]*xzi/\1 tmp.xzi/
$ i \
rm -f tmp.xzi
]])

set(target_clones_patch [==[
From 7ab3ee73706c128fd82cc497c86229ba05e6df2c Mon Sep 17 00:00:00 2001
From: Kai Pastor <dg0yt@darc.de>
Date: Tue, 7 Jul 2020 19:55:05 +0200
Subject: [PATCH] CMake build: Check "target_clones" before use

gcc's "target_clones" and "ifunc" function attributes rely on
extensions to the ELF standard. Using them on MinGW causes "error:
the call requires 'ifunc', which is not supported by this target".
Amends 5396b72.
---
 src/lib_proj.cmake | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/lib_proj.cmake b/src/lib_proj.cmake
index abc9cc4b..59cb9572 100644
--- a/src/lib_proj.cmake
+++ b/src/lib_proj.cmake
@@ -303,7 +303,18 @@ source_group("CMake Files" FILES CMakeLists.txt)
 # Embed PROJ_LIB data files location
 add_definitions(-DPROJ_LIB="${CMAKE_INSTALL_PREFIX}/${DATADIR}")
 
-add_definitions(-DTARGET_CLONES_FMA_ALLOWED)
+# The gcc "target_clones" function attribute relies on an extension
+# to the ELF standard. It must not be used on MinGW.
+include(CheckCXXSourceCompiles)
+set(CMAKE_REQUIRED_QUIET TRUE)
+check_cxx_source_compiles([[
+  __attribute__((target_clones("fma","default")))
+  int clonable() { return 0; }
+  int main() { return clonable(); }
+]] TARGET_CLONES_FMA_ALLOWED)
+if(TARGET_CLONES_FMA_ALLOWED)
+  add_definitions(-DTARGET_CLONES_FMA_ALLOWED)
+endif()
 
 #################################################
 ## targets: libproj and proj_config.h
-- 
2.17.1
]==])

superbuild_package(
  NAME           proj-patches
  VERSION        ${patch_version}
  DEPENDS
    host:xz-utils
  
  SOURCE_WRITE
    portability.sed  portability_sed
    target_clones.patch  target_clones_patch
  SOURCE
    URL            ${base_url}proj_${patch_version}.debian.tar.xz
    URL_HASH       ${patch_hash}
    PATCH_COMMAND
      sed -f "<SOURCE_DIR>/portability.sed" -i -- "<SOURCE_DIR>/datumgrids.shar"
    COMMAND
      sed -f "<SOURCE_DIR>/portability.sed" -i -- "<SOURCE_DIR>/datumgrids-ch.shar"
  
  # Only in the build phase, we can rely on our `xz` from package xz-utils.
  BUILD [[
    CONFIGURE_COMMAND ""
    BUILD_COMMAND
      "${CMAKE_COMMAND}" -E make_directory "<SOURCE_DIR>/data"
    COMMAND
      "${CMAKE_COMMAND}" -E chdir "<SOURCE_DIR>/data"
        sh "<SOURCE_DIR>/datumgrids.shar" -c
	COMMAND
      "${CMAKE_COMMAND}" -E chdir "<SOURCE_DIR>/data"
        sh "<SOURCE_DIR>/datumgrids-ch.shar" -c
    INSTALL_COMMAND ""
  ]]
)

superbuild_package(
  NAME           proj
  VERSION        ${patch_version}
  DEPENDS
    source:proj-patches-${patch_version}  # source-time: patches
    host:proj-patches-${patch_version}    # install-time: data
    host:sqlite3
    curl
    googletest
    pkg-config
    sqlite3
    tiff
  
  SOURCE
    URL            ${base_url}proj_${version}.orig.tar.gz
    URL_HASH       ${download_hash}
    PATCH_COMMAND
      patch -p1 < ../proj-patches-${patch_version}/target_clones.patch
    #COMMAND
    #  "${CMAKE_COMMAND}"
    #    -Dpackage=proj-patches-${patch_version}
    #    -P "${APPLY_PATCHES_SERIES}"
  
  USING            USE_SYSTEM_PROJ patch_version
  BUILD_CONDITION  ${test_system_proj}
  BUILD [[
    CMAKE_ARGS
      "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}"
      "-DCMAKE_BUILD_TYPE:STRING=$<CONFIG>"
      -DBUILD_SHARED_LIBS=ON
      -DUSE_THREAD=ON
      -DPROJ_BIN_SUBDIR=bin
      -DPROJ_LIB_SUBDIR=lib
      -DPROJ_DATA_SUBDIR=share/proj
      -DPROJ_DOC_SUBDIR=share/doc/proj
      -DPROJ_INCLUDE_SUBDIR=include
      -DPROJ_CMAKE_SUBDIR=lib/cmake
    $<$<NOT:$<BOOL:@CMAKE_CROSSCOMPILING@>>:
      -DBUILD_TESTING=ON
      -DUSE_EXTERNAL_GTEST=ON
    >
    $<$<BOOL:@CMAKE_CROSSCOMPILING@>:
      -DCMAKE_PROGRAM_PATH=${HOST_DIR}/bin # for sqlite3
      -DBUILD_TESTING=OFF
    >
    $<$<NOT:$<OR:$<BOOL:@CMAKE_CROSSCOMPILING@>,$<BOOL:@MSYS@>>>:
    TEST_COMMAND
      "${CMAKE_COMMAND}" -E env
        "PROJ_LIB=${DESTDIR}${CMAKE_STAGING_PREFIX}/share/proj"
        "${CMAKE_COMMAND}" --build . --target test
    TEST_AFTER_INSTALL
    >
    INSTALL_COMMAND
      "${CMAKE_COMMAND}" --build . --target install/strip/fast
    COMMAND
      "${CMAKE_COMMAND}" -E copy_directory
        "<SOURCE_DIR>/../proj-patches-${patch_version}/data"
        "${DESTDIR}${CMAKE_STAGING_PREFIX}/share/proj"
    COMMAND
      "${CMAKE_COMMAND}" -E copy
        "<SOURCE_DIR>/../proj-patches-${patch_version}/copyright"
        "${DESTDIR}${CMAKE_STAGING_PREFIX}/share/doc/copyright/proj-${patch_version}.txt"
  ]]
)
