#!/usr/bin/python3

# Copyright: 2016-2017 Dmitry Shachnev <mitya57@debian.org>
# License: LGPL-3 or GPL-2+
#
# License: LGPL-3
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# On Debian systems, the complete text of the GNU Lesser General Public
# License version 3 can be found in /usr/share/common-licenses/LGPL-3.
#
# License: GPL-2
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# On Debian systems, the complete text of the GNU General Public
# License version 2 can be found in /usr/share/common-licenses/GPL-2.


import os
import re
import sys

verbose = 'VERBOSE' in os.environ

author_map = {
    re.compile('^BlackBerry|^Research [Ii]n Motion'): 'BlackBerry Limited (formerly Research In Motion)',
    re.compile('^BogDan Vatra'): 'BogDan Vatra',
    re.compile('^Canonical'): 'Canonical, Ltd.',
    re.compile('^David Faure'): 'David Faure',
    re.compile('^Giuseppe D\'Angelo'): 'Giuseppe D\'Angelo <dangelog@gmail.com>',
    re.compile('^Governikus GmbH & Co. KG'): 'Governikus GmbH & Co. KG',
    re.compile('^Green Hills Software'): 'Green Hills Software',
    re.compile('^Intel Corporation'): 'Intel Corporation',
    re.compile('^Ivan Komissarov'): 'Ivan Komissarov <ABBAPOH@gmail.com>',
    re.compile('KDAB'): 'Klarälvdalens Datakonsult AB, a KDAB Group company',
    re.compile('^Konstantin Ritt'): 'Konstantin Ritt',
    re.compile('^Lorn Potter'): 'Lorn Potter',
    re.compile('Martsum .*tmartsum\[at\]gmail.com'): 'Thorbjørn Lund Martsum <tmartsum@gmail.com>',
    re.compile('^Olivier Goffart'): 'Olivier Goffart <ogoffart@woboq.com>',
    re.compile('^Richard J. Moore'): 'Richard J. Moore <rich@kde.org>',
    re.compile('^Robin Burchell'): 'Robin Burchell <robin.burchell@viroteck.net>',
    re.compile('^Samuel Gaist'): 'Samuel Gaist <samuel.gaist@edeltech.ch>',
    re.compile('^Stephen Kelly'): 'Stephen Kelly <steveire@gmail.com>',
    re.compile('^The Qt Company'): 'The Qt Company Ltd.',
}

licenses_map = {
    'BSD': 'BSD-3-clause',
    'FDL': 'GFDL-NIV-1.3',
    'GPL': 'GPL-3',
    'GPL-EXCEPT': 'GPL-3 with Qt-1.0 exception',
    'LGPL': 'LGPL-3 or GPL-2',
    'MIT': 'MIT',
}

exclude_prefixes = (
    'header',
    '.git',
)

start_header = '## BEGIN AUTO GENERATED BLOCK'
end_header = '## END AUTO GENERATED BLOCK'


# A representation of a 'Files' field together with their 'Copyright'
class CopyrightInfo():
    def __init__(self):
        self.min_years = {}
        self.max_years = {}
        self.authors = []
        self.files = []

    def add_authors(self, authors):
        for min_year, max_year, author in authors:
            if author in self.authors:
                self.min_years[author] = min(self.min_years[author], min_year)
                self.max_years[author] = max(self.max_years[author], max_year)
            else:
                self.authors.append(author)
                self.min_years[author] = min_year
                self.max_years[author] = max_year

    def get_strings(self, authors):
        for author in authors:
            min_year = self.min_years[author]
            max_year = self.max_years[author]
            if min_year == max_year:
                yield '%d %s' % (min_year, author)
            else:
                yield '%d-%d %s' % (min_year, max_year, author)


def canonicalize_author_name(author):
    for regex, replacement in author_map.items():
        if regex.search(author):
            return replacement
    return author


def parse_file(filename):
    license = None
    authors = []
    with open(filename) as file:
        try:
            data = file.readlines(500)
        except UnicodeDecodeError:
            data = []
            authors = None
    for line in data:
        if line[3:16] == 'Copyright (C)' and line[0] != ' ':
            copyright = line[17:-1]
            max_year = min_year = int(copyright[:4])
            if copyright[4] == '-':
                max_year = int(copyright[5:9])
                author = copyright[10:]
            elif copyright[4:7] == ' - ':
                max_year = int(copyright[7:11])
                author = copyright[12:]
            else:
                author = copyright[5:]
            author = canonicalize_author_name(author)
            authors.append((min_year, max_year, author))
        if line[3:21] == '$QT_BEGIN_LICENSE:':
            license = licenses_map[line[21:-2]]
    if license and not authors:
        print(filename + ' : ' + license + ' : No authors!', file=sys.stderr)
    elif verbose:
        if authors is None:
            print(filename + ' (binary)')
        elif license is None:
            print(filename + ' (unknown)')
        else:
            print(filename + '(' + license + ')')
    return license, authors


def get_source_files(root_directory):
    for dirpath, dirnames, filenames in os.walk(root_directory):
        for filename in filenames:
            full_path = os.path.join(dirpath, filename)
            if full_path.startswith('./'):
                full_path = full_path[2:]
            if any(full_path.startswith(prefix) for prefix in exclude_prefixes):
                continue
            yield full_path


def format_list(title, strings):
    return title + ('\n' + ' ' * len(title)).join(strings)


def main(root_directory):
    with open('debian/copyright') as copyright_file:
        current_copyright = copyright_file.read()
        start_pos = current_copyright.find(start_header) + len(start_header) + 1
        start_data = current_copyright[:start_pos]
        end_pos = current_copyright.find(end_header) - 1
        end_data = current_copyright[end_pos:]
    with open('debian/copyright', 'w') as output_file:
        output_file.write(start_data)
        write_output(root_directory, output_file)
        output_file.write(end_data)

def write_output(root_directory, output_file):
    data = {}

    for filename in get_source_files(root_directory):
        license, authors = parse_file(filename)
        if license is None:
            continue
        if license not in data:
            data[license] = CopyrightInfo()
        copyright_info = data[license]
        copyright_info.files.append(filename)
        copyright_info.add_authors(authors)

    for license in sorted(data.keys()):
        output_file.write('\n## ' + license + '\n')
        copyright_info = data[license]
        output_file.write('\n')
        output_file.write(format_list('Files: ', sorted(copyright_info.files)) + '\n')
        output_file.write(format_list('Copyright: ', copyright_info.get_strings(sorted(copyright_info.authors))) + '\n')
        output_file.write('License: ' + license + '\n')


if __name__ == '__main__':
    main('.')
