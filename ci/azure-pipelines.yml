# This file is part of OpenOrienteering.

# Copyright 2019 Kai Pastor
#
# Redistribution and use is allowed according to the terms of the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products 
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

trigger:
- master
- topic/*

jobs:
- job: Source

  pool:
    vmImage: 'ubuntu-16.04'

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      pipelineId: $(openorienteering.superbuild.pipelineId)
      artifactName: 'superbuild-source'
      targetPath: $(Build.SourcesDirectory)/download
    displayName: 'Download previous source artifact'
    condition: variables['openorienteering.superbuild.pipelineId']

  - task: CMake@1
    inputs:
      workingDirectory: $(Build.SourcesDirectory)/build
      cmakeArgs: >
        $(Build.SourcesDirectory)
        -G "Unix Makefiles"
        -DSUPERBUILD_DOWNLOAD_DIR=$(Build.SourcesDirectory)/download
        -DSUPERBUILD_DISABLE_DEPENDENCIES=TRUE
        -DENABLE_x86_64-w64-mingw32=1
        -Dx86_64-w64-mingw32-gcc_EXECUTABLE=not-needed
        -Dx86_64-w64-mingw32-g++_EXECUTABLE=not-needed
        -Dx86_64-w64-mingw32-windres_EXECUTABLE=not-needed
        -DENABLE_arm-linux-androideabi=1
        -DANDROID_BUILD_LIBCXX=1
    displayName: 'Configure'

  - bash: |
      set -x
      set -e
      cd $(Build.SourcesDirectory)/build
      make help | \
        grep -- '-source' | \
        sort | \
        while read DOTS TARGET; do
          case "${TARGET}" in
            *-git-*)           continue ;;
            *-toolchain-ndk-*) continue ;;
            android-libcxx-*)  continue ;;
            android-ndk-*)     continue ;;
            android-sdk-*)     continue ;;
            openorienteering*) continue ;;
            qt*-5.6.*)         continue ;;
            *)                 make "${TARGET}" ;;
          esac
        done
    displayName: 'Download sources'
    env:
      VERBOSE: ''

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'superbuild-source'
      targetPath: $(Build.SourcesDirectory)/download
    displayName: 'Publish source artifact'


- job: Superbuild
  timeoutInMinutes: 120
  dependsOn: Source

  strategy:
    matrix:
      macOS:
        imageName: 'macos-10.13'
        cmakeArgs: >
          -DUSE_SYSTEM_LZMA=OFF
        targetSuffix:
      Linux-x64:
        imageName: 'ubuntu-16.04'
        cmakeArgs:
        targetSuffix:
      MinGW-x64:
        imageName: 'ubuntu-16.04'
        cmakeArgs: >
          -DENABLE_x86_64-w64-mingw32=1
          -Dx86_64-w64-mingw32_INSTALL_DIR=$(Build.SourcesDirectory)/build/default/install/x86_64-w64-mingw32
          -Dx86_64-w64-mingw32_INSTALL_PREFIX=/usr
          -Dx86_64-w64-mingw32_TOOLCHAIN_DIR=$(Build.SourcesDirectory)/build/default/install/x86_64-w64-mingw32/toolchain
          -Dmingw-w64_FIX_HEADERS=1
        targetSuffix: '-x86_64-w64-mingw32'
      Android-armv7:
        imageName: 'macos-10.13'
        cmakeArgs: >
          -DENABLE_arm-linux-androideabi=1
          -Darm-linux-androideabi_INSTALL_DIR=$(Build.SourcesDirectory)/build/default/install/arm-linux-androideabi
          -Darm-linux-androideabi_INSTALL_PREFIX=/usr
          -Darm-linux-androideabi_TOOLCHAIN_DIR=$(Build.SourcesDirectory)/build/default/install/arm-linux-androideabi/toolchain
          -DANDROID_BUILD_LIBCXX=1
        targetSuffix: '-arm-linux-androideabi'

  pool:
    vmImage: $(imageName)

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'superbuild-source'
      targetPath: $(Build.SourcesDirectory)/download
    displayName: 'Download source artifact'

  - bash: |
      set -x
      set -e
      case "$(imageName)$(targetSuffix)" in
        ubuntu-*)
          sudo apt-get update
          sudo apt-get install \
            doxygen graphviz python-lxml \
            g++-mingw-w64-x86-64 \
            '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          # System libraries, but expected to have superbuild copyright files
          DEST=$(Build.SourcesDirectory)/build/default/install/share/doc/copyright
          mkdir -p ${DEST}
          cp /usr/share/doc/libexpat1/copyright      ${DEST}/expat-$(imageName).txt
          cp /usr/share/doc/libjpeg-turbo8/copyright ${DEST}/libjpeg-turbo-$(imageName).txt
          cp /usr/share/doc/liblzma5/copyright       ${DEST}/liblzma-$(imageName).txt
          cp /usr/share/doc/libpcre3/copyright       ${DEST}/pcre3-$(imageName).txt
          cp /usr/share/doc/libpng12-0/copyright     ${DEST}/libpng-$(imageName).txt
          cp /usr/share/doc/libtiff5/copyright       ${DEST}/tiff-$(imageName).txt
          cp /usr/share/doc/mingw-w64-x86-64-dev/copyright  ${DEST}/mingw-w64-x86-64-$(imageName).txt
          cp /usr/share/doc/zlib1g/copyright         ${DEST}/zlib-$(imageName).txt
          ;;
        macos-*)
          sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
          xcode-select --print-path
          pip install lxml
          ;;
      esac
    displayName: 'Prepare build tools'

  - bash: |
      set -x
      set -e
      sed -i -e 's, install/fast, package/fast,;/DESTDIR=/d' openorienteering-mapper-git.cmake
      cp ci/num_jobs.cmake .
    displayName: 'Patch'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: >
        $(Build.SourcesDirectory)
        -G "Unix Makefiles"
        -DCMAKE_BUILD_TYPE=Release
        -DSUPERBUILD_DOWNLOAD_DIR=$(Build.SourcesDirectory)/download
        -DUSE_SYSTEM_PCRE2=FALSE
        -DMapper_GIT_QT_VERSION=5.12
        -DMapper_GIT_LICENSING_PROVIDER=superbuild
        -DMapper_GIT_ENABLE_POSITIONING=ON
        $(cmakeArgs)
    displayName: 'Configure'

  - bash: |
      set -x
      set -e
      cd $(Build.SourcesDirectory)/build
      make `cat num_jobs` \
        toolchain-info$(targetSuffix) \
        $(openorienteering.superbuild.target)$(targetSuffix)
      rm -Rf default/install/tmp
      #
      TEST_RESULTS="$(Build.SourcesDirectory)/testResults"
      rm -Rf "${TEST_RESULTS}"
      cd $(Build.SourcesDirectory)/build/default
      for I in */Testing/*/Test.xml; do
        if test -f "${I}"; then
          DIR=`echo ${I%/Test.xml} | sed -e 's,/Testing/,_,g'`
          mkdir -p "${TEST_RESULTS}/${DIR}"
          cp "$I" "${TEST_RESULTS}/${DIR}/"
        fi
      done
      #
      set +x # Tracing the echo line may overwrite the desired effect.
      if test -d "${TEST_RESULTS}"; then
        echo "##vso[task.setVariable variable=testResults]${TEST_RESULTS}"
      fi
      echo "##vso[task.setVariable variable=createArtifacts]$(openorienteering.superbuild.createArtifacts)"
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      DYLD_LIBRARY_PATH: $(Build.SourcesDirectory)/build/default/install/lib
      LD_LIBRARY_PATH: $(Build.SourcesDirectory)/build/default/install/lib
    timeoutInMinutes: 120
    displayName: 'Build'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '*/Test.xml'
      searchFolder: '$(testResults)'
      testRunTitle: '$(imageName)$(targetSuffix)'
      buildPlatform: '$(imageName)'
    condition: variables['testResults']
    displayName: 'Publish test results'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'superbuild-$(imageName)$(targetSuffix)'
      targetPath: $(Build.SourcesDirectory)/build/default/install
    condition: and(succeeded(), in(variables['createArtifacts'], '1', 'on', 'true', 'yes'))
    displayName: 'Publish binary artifacts'
