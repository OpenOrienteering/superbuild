From a0c4eef36f4450359f6e6fa9c1a0473b9fb60a90 Mon Sep 17 00:00:00 2001
From: Kai Pastor <dg0yt@darc.de>
Date: Sun, 29 Mar 2020 12:16:47 +0200
Subject: [PATCH 1/3] Add CMakeLists.txt for downstream builds

This is an alternative to the existing Makefile. It leverages
CMake's abilities for portable out-of-source builds.
In addition, it installs a CMake package configuration file.
---
 CMakeLists.txt | 249 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 249 insertions(+)
 create mode 100644 CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..9f4ccd8
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,249 @@
+cmake_minimum_required(VERSION 3.5)
+
+# GIFLIB_VERSION: We could configure gif_lib.h from CMake, but for now,
+# we keep parsing gif_lib.h for the version, like `getversion` did before.
+file(STRINGS "gif_lib.h" GIFLIB_VERSION REGEX "#define GIFLIB_(MAJOR|MINOR|RELEASE)")
+string(REGEX REPLACE "#define GIFLIB_[A-Z]* " "" GIFLIB_VERSION "${GIFLIB_VERSION}")
+string(REPLACE ";" "." GIFLIB_VERSION "${GIFLIB_VERSION}")
+
+# GIFLIB_SOVERSION: We could just define it here, but for now,
+# we keep parsing Makefile for the version.
+file(STRINGS "Makefile" GIFLIB_SOVERSION REGEX "LIB(MAJOR|MINOR|POINT)=")
+string(REGEX REPLACE "LIB(MAJOR|MINOR|POINT)=" "" GIFLIB_SOVERSION "${GIFLIB_SOVERSION}")
+string(REPLACE ";" "." GIFLIB_SOVERSION "${GIFLIB_SOVERSION}")
+
+
+project(GIFLIB VERSION ${GIFLIB_VERSION} LANGUAGES C)
+
+
+# Prevent overwriting of existing non-generated Makefile.
+if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)
+	message(FATAL_ERROR "This CMake build system must not be used for in-source builds.")
+endif()
+
+
+# Major user configuration options
+option(BUILD_SHARED_LIBS "Create shared libraries." ON)
+set(CMAKE_BUILD_TYPE "Release"
+  CACHE STRING "Build type: Release, Debug, MinSizeRel or RelWithDebInfo"
+)
+option(GIFLIB_BUILD_UTILS "Build and install utility programs" ON)
+find_program(GIFLIB_XMLTO_COMMAND "xmlto"
+  DOC "Tool to process XML documentation"
+)
+
+
+# System configuration detection
+include(CheckPrototypeDefinition)
+include(CheckLibraryExists)
+add_library(dependencies INTERFACE)
+
+# glibc's reallocarray may need -D_GNU_SOURCE, cf.
+# https://sourceware.org/bugzilla/show_bug.cgi?id=21789,
+# https://sourceware.org/git/?p=glibc.git;a=commit;h=2bda273aa3
+foreach(definition "" "-D_GNU_SOURCE")
+	set(CMAKE_REQUIRED_DEFINITIONS ${definition})
+	check_prototype_definition(reallocarray
+	  "void * reallocarray(void *optr, size_t nmemb, size_t size)"
+	  "NULL"
+	  "stdlib.h"
+	  REALLOCARRAY_FOUND${definition}
+	)
+	unset(CMAKE_REQUIRED_DEFINITIONS)
+	if(REALLOCARRAY_FOUND${definition})
+		add_definitions(-DHAVE_REALLOCARRAY ${definition})
+		break()
+	endif()
+endforeach()
+
+check_library_exists(m pow "" LIBM_POW_FOUND)
+if(LIBM_POW_FOUND)
+	target_link_libraries(dependencies INTERFACE m)
+endif()
+
+
+# libgif: shared or static as configured
+add_library(gif
+  dgif_lib.c
+  dgif_lib.c
+  egif_lib.c
+  gifalloc.c
+  gif_err.c
+  gif_font.c
+  gif_hash.c
+  openbsd-reallocarray.c
+)
+set_target_properties(gif PROPERTIES
+  PUBLIC_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/gif_lib.h
+  POSITION_INDEPENDENT_CODE ON
+  SOVERSION ${GIFLIB_SOVERSION}
+)
+target_link_libraries(gif PUBLIC dependencies)
+
+# libgifutil: static, only used to link the utilities
+add_library(gifutil STATIC
+  qprintf.c
+  quantize.c
+  getarg.c
+)
+set_target_properties(gifutil PROPERTIES
+  POSITION_INDEPENDENT_CODE ON
+  SOVERSION ${GIFLIB_SOVERSION}
+)
+target_link_libraries(gifutil PUBLIC gif)
+
+# Utilities
+set(INSTALLABLE
+  gif2rgb
+  gifbuild
+  giffix
+  giftext
+  giftool
+  gifclrmp
+)
+set(UTILS
+  ${INSTALLABLE}
+  gifbg
+  gifcolor
+  gifecho
+  giffilter
+  gifhisto
+  gifinto
+  gifsponge
+  gifwedge
+)
+set(man_pages )
+set(omitted_pages )
+foreach(util ${UTILS})
+	set(installable FALSE)
+	set(maybe_exclude_from_all EXCLUDE_FROM_ALL)
+	if(NOT GIFLIB_BUILD_UTILS)
+		# Disabled build implies disabled installation.
+		list(REMOVE_ITEM INSTALLABLE ${util})
+	elseif(";${INSTALLABLE};" MATCHES ";${util};")
+		set(installable TRUE)
+		set(maybe_exclude_from_all )
+	endif()
+	add_executable(${util} ${maybe_exclude_from_all} ${util}.c)
+	target_link_libraries(${util} gif gifutil dependencies)
+	
+	# Until now, the tarballs include generated man pages,
+	# but the git repository doesn't.
+	set(xml_source "${CMAKE_CURRENT_SOURCE_DIR}/doc/${util}.xml")
+	set(pregenerated_page "${CMAKE_CURRENT_SOURCE_DIR}/doc/${util}.1")
+	if(EXISTS "${pregenerated_page}")
+		if(installable)
+			list(APPEND man_pages "${pregenerated_page}")
+		endif()
+	elseif(EXISTS "${xml_source}")
+		set(generated_page "${CMAKE_CURRENT_BINARY_DIR}/doc/${util}.1")
+		if(GIFLIB_XMLTO_COMMAND)
+			add_custom_command(
+			  OUTPUT "${generated_page}"
+			  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/doc"
+			  COMMAND ${GIFLIB_XMLTO_COMMAND} -o "${CMAKE_CURRENT_BINARY_DIR}/doc" man "${xml_source}"
+			)
+			add_custom_target("${util}.1"
+			  DEPENDS "${generated_page}"
+			)
+			if(installable)
+				list(APPEND man_pages "${generated_page}")
+			endif()
+		else()
+			add_custom_target(${util}.1
+			  COMMAND "${CMAKE_COMMAND}" -E echo "xmlto is required to generate man page ${util}.1"
+			)
+			if(installable)
+				list(APPEND omitted_pages ${util})
+			endif()
+		endif()
+		add_dependencies(${util} ${util}.1)
+	endif()
+endforeach()
+if(omitted_pages AND NOT GIFLIB_XMLTO_COMMAND)
+	message(WARNING "xmlto is required to generate and install man pages for: ${omitted_pages}")
+endif()
+
+
+# Installation
+
+include(GNUInstallDirs)
+
+install(
+  TARGETS gif dependencies
+  EXPORT GIF-targets
+  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  COMPONENT lib
+)
+set(CONFIG_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/GIF/)
+install(
+  EXPORT GIF-targets
+  NAMESPACE GIF::
+  DESTINATION ${CONFIG_DESTINATION}
+)
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  "${CMAKE_CURRENT_BINARY_DIR}/GIF-config-version.cmake"
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+file(WRITE
+  "${CMAKE_CURRENT_BINARY_DIR}/GIF-config.cmake.in"
+[[
+@PACKAGE_INIT@
+include ("${CMAKE_CURRENT_LIST_DIR}/GIF-targets.cmake")
+set(GIF_INCLUDE_DIR "@CMAKE_INSTALL_FULL_INCLUDEDIR@")
+set(GIF_LIBRARIES gif)
+]]
+)
+configure_package_config_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/GIF-config.cmake.in
+  ${CMAKE_CURRENT_BINARY_DIR}/GIF-config.cmake
+  INSTALL_DESTINATION ${CONFIG_DESTINATION}
+)
+install(
+  FILES "${CMAKE_CURRENT_BINARY_DIR}/GIF-config-version.cmake"
+        "${CMAKE_CURRENT_BINARY_DIR}/GIF-config.cmake"
+  DESTINATION ${CONFIG_DESTINATION}
+)
+
+install(
+  TARGETS ${INSTALLABLE}
+  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  COMPONENT util
+)
+
+install(
+  FILES ${man_pages}
+  DESTINATION ${CMAKE_INSTALL_MANDIR}/man1
+  COMPONENT doc
+)
+
+
+# Test
+
+include(ExternalProject)
+ExternalProject_Add(check
+  DEPENDS ${UTILS}
+  EXCLUDE_FROM_ALL 1
+  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/tests"
+  DOWNLOAD_COMMAND ""
+  UPDATE_COMMAND
+    "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_CURRENT_SOURCE_DIR}/tests" "<SOURCE_DIR>"
+  COMMAND
+    "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_CURRENT_SOURCE_DIR}/pic" "<SOURCE_DIR>/../pic"
+  CONFIGURE_COMMAND ""
+  BUILD_IN_SOURCE 1
+  BUILD_ALWAYS 1
+  INSTALL_COMMAND ""
+)
+include(CTest)
+add_test(NAME make-check COMMAND "${CMAKE_COMMAND}" --build . --target check)
-- 
2.17.1

